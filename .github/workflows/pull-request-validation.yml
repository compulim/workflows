name: Pull request validation

on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
      react-version:
        required: false
        type: string
      skip-integration-test:
        required: false
        type: boolean

defaults:
  run:
    shell: bash

env:
  node-version: 18.x

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          cache: npm
      - name: 'Sanity check: must from https://registry.npmjs.org/'
        run: cat ./package-lock.json | jq '.packages | with_entries(select(.value.link | not)) | with_entries(select(.value.resolved != null)) | with_entries(select(.value.resolved | startswith("https://registry.npmjs.org/") | not)) | if length > 0 then halt_error(1) else empty end'
      - run: npm clean-install
      - if: inputs.react-version
        name: Use React ${{ inputs.react-version }}
        run: |
          npm run --if-present switch:react:${{ inputs.react-version }}
          npm install
      - run: npm run build --if-present
      - name: Run npm pack
        run: npm pack
        working-directory: packages/${{ inputs.package-name }}
      - name: Upload tarball artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: tarball
          path: packages/${{ inputs.package-name }}/*.tgz
      - name: Build and test pages
        run: |
          npm install
          npm run precommit --if-present
          npm run build
          npm run test --if-present
        working-directory: packages/pages
      # Only run precommit after pages is built, because we hand-install tarball.
      - run: npm run precommit --if-present
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: packages/pages/public
      - name: Run unit tests
        run: npm test
        working-directory: packages/${{ inputs.package-name }}

  sanity-check:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: tarball
      - name: Extract tarball to root
        run: tar -xvf ${{ inputs.package-name }}-*.tgz --strip-components=1
      - name: 'Sanity check: has LICENSE'
        run: compgen -G LICENSE
      - name: 'Sanity check: has README.md'
        run: compgen -G README.md
      - name: 'Sanity check: main exists'
        run: cat package.json | jq -r '.main' | xargs -L1 test -f $1
      - name: 'Sanity check: typings exists'
        run: cat package.json | jq -r '.types // .typings' | xargs -L1 test -f $1
      - name: 'Sanity check: all exports exists'
        run: cat package.json | jq '(.exports | paths) as $p | .exports | getpath($p) | if . | type == "string" then . else empty end' | xargs -L1 test -f $1
      - name: 'Sanity check: has source maps'
        run: compgen -G lib/**/*.js.map
      - name: 'Sanity check: no lib/**/*.spec.*'
        run: '! compgen -G lib/**/*.spec.*'
      - name: 'Sanity check: no lib/**/*.test.*'
        run: '! compgen -G lib/**/*.test.*'
      - name: 'Sanity check: no production dependencies are pre-release'
        run: cat package.json | jq '.dependencies | to_entries | map(.value | select(contains("-"))) | if length > 0 then halt_error(1) else empty end'

  integration-test:
    if: '!inputs.skip-integration-test'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          path: ./repo
      - name: Isolate integration test
        run: |
          mv ./repo/packages/integration-test/ ./
          rm -r ./repo
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Download tarball artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: tarball
          path: ./integration-test/
      - name: Run npm install
        run: npm install *.tgz
        working-directory: integration-test
      - name: Run integration tests
        run: npm test
        working-directory: integration-test
