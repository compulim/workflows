name: Pull request validation

on:
  workflow_call:
    inputs:
      github-pages:
        default: true
        required: false
        type: boolean
      node-version:
        default: lts/*
        required: false
        type: string
      package-name:
        required: true
        type: string
      project-type:
        default: modern
        required: false
        type: string
      skip-integration-test:
        required: false
        type: boolean
      switch:
        default: current
        required: false
        type: string

defaults:
  run:
    shell: bash

env:
  # In the future, we should infer it from "switch: node-20".
  node-version: ${{ inputs.node-version }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@main
        with:
          node-version: ${{ env.node-version }}
          cache: npm
      - name: 'Sanity check: must from https://registry.npmjs.org/'
        run: cat ./package-lock.json | jq '.packages | with_entries(select(.value.link | not)) | with_entries(select(.value.resolved != null)) | with_entries(select(.value.resolved | startswith("https://registry.npmjs.org/") | not)) | if length > 0 then halt_error(1) else empty end'
      - name: 'Sanity check: validate CHANGELOG.md'
        run: npx keep-a-changelog --latest-release
      - name: 'Sanity check: no private packages should have published on https://registry.npmjs.org/'
        run: cat package.json | jq -r '.workspaces[]' | xargs -I {} jq -r 'select(.private==true) | .name' {}/package.json | xargs -I {} bash -c 'npm view {} 2>&1 | grep -q "E404" || { echo "{} is private but is already published"; exit 1; }'
      - id: find-package-path
        name: Find package path
        run: |
          path=$(find packages -name "package.json" -exec sh -c 'jq -e ".name == \"${{ inputs.package-name }}\"" {} > /dev/null && dirname {}' \;)
          [ -z "$path" ] && exit 1
          echo package-path=$path | tee --append $GITHUB_OUTPUT
      - run: npm clean-install
      - if: inputs.switch && inputs.switch != 'current'
        name: Use switch "${{ inputs.switch }}"
        run: npm run switch:${{ inputs.switch }} --if-present
      - name: Run npm build
        run: |
          npm run build --if-present --no-ignore-scripts
      - name: Run npm pack
        run: |
          npm pack --no-ignore-scripts
        working-directory: ${{ steps.find-package-path.outputs.package-path }}
      - name: Upload tarball artifact
        uses: actions/upload-artifact@main
        with:
          name: tarball-${{ inputs.switch }}
          path: ${{ steps.find-package-path.outputs.package-path }}/*.tgz
      - if: inputs.github-pages
        name: Build and test pages
        run: |
          npm install
          npm run precommit --if-present
          npm run build --no-ignore-scripts
          npm run test --if-present --no-ignore-scripts
        working-directory: packages/pages
      # Only run precommit after pages is built, because we hand-install tarball.
      - run: npm run precommit --if-present
      - if: inputs.github-pages
        name: Upload pages artifact
        uses: actions/upload-pages-artifact@main
        with:
          name: github-pages-${{ inputs.switch }}
          path: packages/pages/public
      - name: Run unit tests
        run: |
          ls -laR
          npm test --no-ignore-scripts
        working-directory: ${{ steps.find-package-path.outputs.package-path }}

  sanity-check:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download tarball artifact
        uses: actions/download-artifact@main
        with:
          name: tarball-${{ inputs.switch }}
      - name: Extract tarball to root
        run: tar -xvf *.tgz --strip-components=1
      - name: 'Sanity check: has LICENSE'
        run: compgen -G LICENSE
      - name: 'Sanity check: has README.md'
        run: compgen -G README.md
      - name: 'Sanity check: main exists'
        run: cat package.json | jq -r '.main' | xargs -L1 test -f $1
      - if: inputs.project-type != 'legacy'
        name: 'Sanity check: typings exists'
        run: cat package.json | jq -r '.types // .typings' | xargs -L1 test -f $1
      - name: 'Sanity check: all exports exists'
        run: cat package.json | jq '(.exports | paths) as $p | .exports | getpath($p) | if . | type == "string" then . else empty end' | xargs -L1 test -f $1
      - if: inputs.project-type != 'legacy'
        name: 'Sanity check: has source maps'
        run: |
          shopt -s globstar
          compgen -G **/*.js.map
      - name: 'Sanity check: no **/*.spec.*'
        run: |
          shopt -s globstar
          ! compgen -G **/*.spec.*
      - name: 'Sanity check: no **/*.test.*'
        run: |
          shopt -s globstar
          ! compgen -G **/*.test.*
      - name: 'Sanity check: no production dependencies are pre-release'
        run: cat package.json | jq '(.dependencies // {}) | to_entries | map(.value | select(contains("-"))) | if length > 0 then halt_error(1) else empty end'

  integration-test:
    if: '!inputs.skip-integration-test'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main
        with:
          path: ./repo
      - name: Isolate integration test
        run: |
          mv ./repo/packages/integration-test/ ./
          rm -r ./repo
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@main
        with:
          node-version: ${{ env.node-version }}
      - name: Download tarball artifact
        uses: actions/download-artifact@main
        with:
          name: tarball-${{ inputs.switch }}
          path: ./integration-test/
      - name: Run npm install
        run: npm install *.tgz
        working-directory: integration-test
      - name: Run integration tests
        run: npm test --no-ignore-scripts
        working-directory: integration-test
      - if: ${{ failure() }}
        name: Post-test cleanup on failure
        run: npm run posttest
        working-directory: integration-test
