name: Continuous deployment

on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
    outputs:
      version:
        value: ${{ jobs.build.outputs.version }}

defaults:
  run:
    shell: bash

env:
  node-version: 18.x

jobs:
  build:
    name: Build
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-type: ${{ steps.version-type.outputs.version-type }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: version-type
        name: Determine version type
        run: 'if [[ "$(cat ./package.json | jq -r ''.version'')" == *-0 ]]; then echo version-type=prerelease | tee --append $GITHUB_OUTPUT; else echo version-type=production | tee --append $GITHUB_OUTPUT; fi'
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          cache: 'npm'
      - if: steps.version-type.outputs.version-type != 'production'
        name: Run npx version-from-git --no-git-tag-version
        run: npx version-from-git --no-git-tag-version
      - id: version
        name: Get version
        run: echo version=`cat package.json | jq -r '.version'` | tee --append $GITHUB_OUTPUT
      - name: Uninstall current version
        run: npm uninstall --workspaces ${{ inputs.package-name }}
      - name: Update version
        run: npm version --no-git-tag-version --no-workspaces-update --workspace=${{ inputs.package-name }} ${{ steps.version.outputs.version }}
      - name: Propagate versions
        run: npm install --workspaces ${{ inputs.package-name }}@${{ steps.version.outputs.version }}
      - run: npm clean-install
      - run: npm run build --if-present
      - name: Run npm pack
        run: npm pack
        working-directory: packages/${{ inputs.package-name }}
      - name: Upload tarball artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: tarball
          path: packages/${{ inputs.package-name }}/*.tgz
      - name: Build pages
        run: |
          npm install ../${{ inputs.package-name }}/*.tgz
          npm run build
        working-directory: packages/pages
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: packages/pages/public

  upload-changelog:
    name: Upload changelog
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install mdsplit
        run: pip install mdsplit
      - name: Extract CHANGELOG.md
        run: mdsplit CHANGELOG.md --max-level 2
      - name: Display latest version
        run: cat $(ls ./CHANGELOG/**/[0-9]* -1 | tail -n 1) | tee ./CHANGELOG.latest.md
      - name: Upload changelog
        uses: actions/upload-artifact@v3.1.1
        with:
          name: changelog
          path: ./CHANGELOG.latest.md

  publish-npm:
    environment:
      name: prerelease
      url: ${{ steps.summary.outputs.url }}
    if: needs.build.outputs.version-type != 'production'
    name: Publish to NPM
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          registry-url: https://registry.npmjs.org/
      - name: Download tarball artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: tarball
      - id: read-package-json
        name: Read package.json
        run: |
          echo package-name=`tar --extract --file=\`ls ./*.tgz\` --to-stdout package/package.json | jq -r .name` | tee --append $GITHUB_OUTPUT
          echo version=`tar --extract --file=\`ls ./*.tgz\` --to-stdout package/package.json | jq -r .version` | tee --append $GITHUB_OUTPUT
      - name: 'Sanity check: version must be prerelease'
        run: '[[ "$(cat ./package.json | jq -r ''.version'')" == *-0 ]]'
      - env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --tag ${{ github.ref_name }} `ls *.tgz`
      - id: summary
        name: Summary
        run: |
          echo url=https://npmjs.com/package/${{ steps.read-package-json.outputs.package-name }}/v/${{ steps.read-package-json.outputs.version }} | tee --append $GITHUB_OUTPUT
          echo NPM package published to https://npmjs.com/package/${{ steps.read-package-json.outputs.package-name }}/v/${{ steps.read-package-json.outputs.version }}. | tee --append $GITHUB_STEP_SUMMARY

  publish-tag:
    if: needs.build.outputs.version-type == 'production'
    name: Publish tag
    needs: build
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure user profile
        run: |
          git config user.email "${{ format('@{0}', github.actor) }}"
          git config user.name "${{ format('@{0}', github.actor) }}"
      - id: tag
        name: Create tag
        run: |
          TAG_NAME=v${{ needs.build.outputs.version }}
          git tag --annotate --message "${{ needs.build.outputs.version }} Release" $TAG_NAME

          echo tag=$TAG_NAME | tee --append $GITHUB_OUTPUT
      - name: Push tag
        run: git push --set-upstream origin ${{ steps.tag.outputs.tag }}

  publish-release:
    if: needs.build.outputs.version-type == 'production'
    name: Publish release
    needs:
      - publish-tag
      - upload-changelog
    runs-on: ubuntu-latest
    steps:
      - name: Download changelog artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: changelog
      - name: Download tarball artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: tarball
      - env:
          GH_TOKEN: ${{ github.token }}
        name: Create release
        run: gh release create ${{ needs.publish-tag.outputs.tag }} *.tgz --notes-file ./CHANGELOG.latest.md --repo ${{ github.repository }}

  # Temporarily disable publish
  # publish-pages:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   name: Publish to GitHub Pages
  #   needs: build
  #   permissions:
  #     pages: write
  #     id-token: write
  #   runs-on: ubuntu-latest
  #   steps:
  #     - id: deployment
  #       name: Deploy to GitHub Pages
  #       uses: actions/deploy-pages@v2
