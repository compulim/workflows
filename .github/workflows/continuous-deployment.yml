name: Continuous deployment

on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
    outputs:
      npm-url:
        value: ${{ jobs.publish-package.outputs.url }}
      pages-url:
        value: ${{ jobs.publish-pages.outputs.url }}
      version:
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - id: set-version
        name: Run npx version-from-git --no-git-tag-version
        run: |
          npx version-from-git --no-git-tag-version
          echo version=`cat package.json | jq -r '.version'` >> $GITHUB_OUTPUT
      - name: Propagate versions
        run: |
          cd packages/${{ inputs.package-name }}
          npm version --no-git-tag-version ${{ steps.set-version.outputs.version }}
      - run: npm clean-install
      - run: npm run build --if-present
      - name: Run npm pack
        run: |
          cd packages/${{ inputs.package-name }}
          npm pack
      - name: Upload tarball artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: tarball
          path: packages/${{ inputs.package-name }}/*.tgz
      - name: Build pages
        run: |
          cd packages/pages
          npm install ../${{ inputs.package-name }}/*.tgz
          npm run build
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: packages/pages/public

  publish-package:
    environment:
      name: prerelease
      url: ${{ steps.summary.outputs.url }}
    needs: build
    outputs:
      url: ${{ steps.summary.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
      - name: Download tarball artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: tarball
      - id: read-package-json
        name: Read package.json
        run: |
          echo package-name=`tar --extract --file=\`ls ./*.tgz\` --to-stdout package/package.json | jq -r .name` >> $GITHUB_OUTPUT
          echo version=`tar --extract --file=\`ls ./*.tgz\` --to-stdout package/package.json | jq -r .version` >> $GITHUB_OUTPUT
      - if: ${{ !contains(steps.read-package-json.outputs.version, '-') }}
        name: Check version number
        run: |
          echo ::error::Cannot publish production version ${{ steps.read-package-json.outputs.version }}
          exit 1
      - env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --tag ${{ github.ref_name }} `ls *.tgz`
      - id: summary
        name: Summary
        run: |
          echo url=https://npmjs.com/package/${{ steps.read-package-json.outputs.package-name }}/v/${{ steps.read-package-json.outputs.version }} >> $GITHUB_OUTPUT
          echo NPM package published to https://npmjs.com/package/${{ steps.read-package-json.outputs.package-name }}/v/${{ steps.read-package-json.outputs.version }}. >> $GITHUB_STEP_SUMMARY

  publish-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    outputs:
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - id: deployment
        name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2
