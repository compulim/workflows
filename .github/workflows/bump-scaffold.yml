name: Bump scaffold

on:
  workflow_call:
    inputs:
      package-name:
        description: Name of the package
        required: true
        type: string
      use-react:
        default: true
        description: Use React
        type: boolean
      skip-integration-test:
        default: false
        description: Skip integration test
        type: boolean
    secrets:
      APP_ID:
        required: true
      PRIVATE_KEY:
        required: true

defaults:
  run:
    shell: bash

jobs:
  bump-scaffold:
    environment:
      name: workflow-bot
      url: ${{ steps.pull-request.outputs.url }}
    name: Bump scaffold
    runs-on: ubuntu-latest

    steps:
      - id: generate-token
        name: Generate token for workflow-bot
        uses: compulim/tibdex-github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Check out current
        uses: actions/checkout@v4
        with:
          path: ./current
          token: ${{ steps.generate-token.outputs.token }}

      - name: Check out template
        uses: actions/checkout@v4
        with:
          path: ./template
          repository: compulim/workflows

      - id: find-package-path
        name: Find package path
        run: |
          path=$(find ./current/packages -name "package.json" -exec sh -c 'jq -e ".name == \"${{ inputs.package-name }}\"" {} > /dev/null && dirname {}' \;)
          [ -z "$path" ] && exit 1
          echo package-path=$path | tee --append $GITHUB_OUTPUT

      - name: Configure user profile
        run: |
          git config user.email "${{ format('@{0}', github.actor) }}"
          git config user.name "${{ format('@{0}', github.actor) }}"
        working-directory: ./current

      - id: create-branch
        name: Create branch
        run: |
          BRANCH_NAME=bot/bump-scaffold/${{ github.run_number }}

          git checkout -b $BRANCH_NAME
          echo branch-name=$BRANCH_NAME >> $GITHUB_OUTPUT
        working-directory: ./current/

      - name: Update directory name
        run: |
          cd ./template/scaffold/copy/
          mv ./packages/\$package-name ${{ steps.find-package-path.outputs.package-path }}

          cd ../../merge/
          mv ./packages/\$package-name ${{ steps.find-package-path.outputs.package-path }}

      - name: Update content
        run: |
          for i in $(find -type f)
          do
            echo --- $i

            sed -- 's/$package-name/${{ inputs.package-name }}/g' $i | tee /tmp/output.tmp
            mv /tmp/output.tmp $i

            sed -- s/\$package-local-name/$(basename "${{ inputs.package-name }}")/g $i | tee /tmp/output.tmp
            mv /tmp/output.tmp $i

            sed -- 's/$skip-integration-test/${{ inputs.skip-integration-test }}/g' $i | tee /tmp/output.tmp
            mv /tmp/output.tmp $i

            sed -- 's/$use-react/${{ inputs.use-react }}/g' $i | tee /tmp/output.tmp
            mv /tmp/output.tmp $i
            echo
          done
        working-directory: ./template/scaffold/

      - name: Remove React in Jest config
        if: '!inputs.use-react'
        run: |
          # Remove @babel/preset-react from jest.config.json/transform

          for i in $(ls -1 jest.*.json)
          do
            echo --- $i

            cat $i | jq -r '. | .transform |= with_entries(if ((.value | type == "array") and .value[0] == "babel-jest" and .value[1].presets) then . | (.value[1].presets |= map(select((. == "@babel/preset-react" or (. | type == "array" and .[0] == "@babel/preset-react") | not)))) else . end)' | tee /tmp/output.tmp
            mv /tmp/output.tmp $i

            echo
          done
        working-directory: ./template/scaffold/copy/${{ steps.find-package-path.outputs.package-path }}/

      - name: Copy scaffold
        run: rsync --recursive --verbose ./template/scaffold/copy/ ./current/

      - name: Merge JSON
        run: |
          shopt -s globstar

          for i in $(find **/*.json -type f)
          do
            echo --- $i

            if [[ -f ../../../current/$i ]]
            then
              cat ../../../current/$i | jq --argfile merge $i '. + $merge' | tee /tmp/temp.json
              mv /tmp/temp.json ../../../current/$i
            fi

            echo
          done
        working-directory: ./template/scaffold/merge/

      - continue-on-error: true
        name: Update configuration files
        run: |
          npm clean-install
          npm run postscaffold
        working-directory: ./current

      - id: get-changes
        name: Get changes
        run: |
          git status
          git ls-files --deleted --exclude-standard --modified --others

          if [[ $(git ls-files --deleted --exclude-standard --modified --others | wc -l) -gt 0 ]]
          then
            echo has-changes=true | tee --append $GITHUB_OUTPUT
          fi
        working-directory: ./current

      - if: steps.get-changes.outputs.has-changes == 'true'
        name: Stage changes
        run: git add .
        working-directory: ./current

      - if: steps.get-changes.outputs.has-changes == 'true'
        name: Commit changes
        run: git commit -a -m "Bump scaffold"
        working-directory: ./current

      - if: steps.get-changes.outputs.has-changes == 'true'
        name: Push changes to ${{ steps.create-branch.outputs.branch-name }}
        run: git push -u origin ${{ steps.create-branch.outputs.branch-name }}
        working-directory: ./current

      - env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        id: pull-request
        if: steps.get-changes.outputs.has-changes == 'true'
        name: Create pull request
        run: echo url=$(gh pr create --body "> Created in [workflow run ${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})." --fill --repo ${{ github.repository }}) | tee --append $GITHUB_OUTPUT
        working-directory: ./current
